#set($table=$table0.toLowerCase())
#set($Table=$strings.capitalizeFirstLetter($table)) 
#set($TABLE=$table0.toUpperCase())
#parse("CommonTemplate.vm")
#set($Comment=$strings.capitalizeFirstLetter($comment0))
#set($comment=$comment0.toLowerCase())
#set($COMMENT=$comment0.toUpperCase())

/************************ CHANGE REPORT HISTORY ******************************\
** Product VERSION,UPDATED BY,UPDATE DATE                                     *
*   DESCRIPTION OF CHANGE                                                     *
*-----------------------------------------------------------------------------*
* V,xiaoran27,2007-4-14 20:36
*   create
\*************************** END OF CHANGE REPORT HISTORY ********************/

package com.lj.db.entity.dao;

import com.lj.db.entity.dao.*;
import com.lj.db.entity.manager.*;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import java.sql.SQLException;
import com.lj.db.entity.pojo.${Table};

/**
 * ${comment0}
 *
 * @author Xiaoran27 $author$
 * @version $Revision: 1.3 $
  */
public class ${Table}Dao extends AbstractDao {

	/** 
	 * 新增一个数据
	 * 
	 * @see com.lj.db.entity.dao.IDao#insert(java.lang.Object)
	 */
	public int insert(Object obj) throws HibernateException {
		try {
    		if (obj instanceof ${Table}) {
    			getSession().save(obj);
    			//getSession().persist(obj); //增加数据好像有问题
    		}else{
    			setErrorInfo("the param is error, it must be a ${Table} instance.");
    			return -1;
    		}
		
		    return 1;
		} catch (HibernateException e) {
			setErrorInfo("insert(Object obj): "+e);
			throw e;
		}
	}

	/** 
	 * 删除一各数据.
	 *
	 * @see com.lj.db.entity.dao.IDao#delete(java.lang.Object)
	 */
	public int delete(Object obj) throws HibernateException {
		try{
    		if (obj instanceof ${Table}) {
    			getSession().delete(obj);
#set($i =0)#set($j =0)#foreach($ColumnCode0 in $ColumnCodes)#set($columncode = $ColumnCode0.toLowerCase())#set($ColumnType0 = $ColumnTypes.get($i))#set($COLUMNTYPE = $ColumnType0.toUpperCase())#set($columntype = $ColumnType0.toLowerCase())#set($ColumnType = $strings.capitalizeFirstLetter($ColumnType0))#if($TablePKS.contains($ColumnCode0))
		}else if (obj instanceof #if($ColumnType0=="int")Integer#elseif($ColumnType0=="long")Long#elseif($ColumnType0=="float")Float#elseif($ColumnType0=="double")Double#else${ColumnType}#end){
    			Query query = getSession().createQuery("delete from com.lj.db.entity.pojo.${Table} where ${columncode}=:${ColumnCode0}");
    			query.setParameter("${ColumnCode0}",obj,Hibernate.#if($ColumnType0=="int")INTEGER#else${COLUMNTYPE}#end);
    			return query.executeUpdate();
#set($j=$j+1)#end #set($i=$i+1)#end
    		}else if (obj instanceof Map){
    			StringBuffer queryHql = new StringBuffer("delete from com.lj.db.entity.pojo.${Table} where 1=1 ");
    			
    			Map map=(Map)obj;
    			for(Iterator iter=map.keySet().iterator();iter.hasNext();){
    				String key=(String)iter.next();
    				queryHql.append(" and ").append(key.toLowerCase());
    				queryHql.append(" = :").append(key);
    			}
    	
    			Query query = getSession().createQuery(queryHql.toString());
    			
    			for(Iterator iter=map.entrySet().iterator();iter.hasNext();){
    				Map.Entry entry=(Map.Entry)iter.next();
    				query = query.setParameter((String)entry.getKey(),entry.getValue());
    			}
    			
    			return query.executeUpdate();
    		}else{
    			setErrorInfo("the param is error, it must be a ${Table} or id(entity's ID datatype) or Map(K,V) instance.");
    			return -1;
    		}
    		
		
		    return 1;
    	} catch (HibernateException e) {
			setErrorInfo("delete(Object obj): "+e);
			throw e;
		}
	}

  /** 
	 * 删除所有数据.
	 *
	 * @see com.lj.db.entity.daor.IDao#deleteAll()
	 */
	public int deleteAll() throws HibernateException {
		try{
    		Query query = getSession().createQuery(" delete from com.lj.db.entity.pojo.${Table}");
    		return query.executeUpdate();
    	} catch (HibernateException e) {
			setErrorInfo("deleteAll(): "+e);
			throw e;
		}
		
	}

  /** 
	 * 修改一个数据.
	 *
	 * @see com.lj.db.entity.dao.IDao#update(java.lang.Object)
	 */
	public int update(Object obj) throws HibernateException {
		try{
    		if (obj instanceof ${Table}) {
    			getSession().update(obj);
    		}else{
    			setErrorInfo("the param is error, it must be a ${Table} instance.");
    			return -1;
    		}
    		
		
		    return 1;
    	} catch (HibernateException e) {
			setErrorInfo("update(Object obj): "+e);
			throw e;
		}
	}

  /** 
	 * 按主键查询数据.
	 *
	 * @see com.lj.db.entity.dao.IDao#queryByPK(java.lang.Object)
	 */
	public Object queryByPK(Object obj) throws HibernateException {
		try{
		    ${Table} ${table} = null;
#set($i =0)#set($j =0)#foreach($ColumnCode0 in $ColumnCodes)#set($columncode = $ColumnCode0.toLowerCase())#set($ColumnType0 = $ColumnTypes.get($i))#set($COLUMNTYPE = $ColumnType0.toUpperCase())#set($columntype = $ColumnType0.toLowerCase())#set($ColumnType = $strings.capitalizeFirstLetter($ColumnType0))#if($TablePKS.contains($ColumnCode0))
    		if (obj instanceof #if($ColumnType0=="int")Integer#elseif($ColumnType0=="long")Long#elseif($ColumnType0=="float")Float#elseif($ColumnType0=="double")Double#else${ColumnType}#end) {
    			Query query = getSession().createQuery("from com.lj.db.entity.pojo.${Table} where ${columncode} = :${ColumnCode0}");
    			query.setParameter("${ColumnCode0}", obj, Hibernate.#if($ColumnType0=="int")INTEGER#else${COLUMNTYPE}#end);
    			
    			List list = query.list();
    			if (!list.isEmpty()){
    				${table} = (${Table})list.get(0);
    			}
    
    		}else{
    			setErrorInfo("the param is error, it must be a #if($ColumnType0=="int")Integer#elseif($ColumnType0=="long")Long#elseif($ColumnType0=="float")Float#elseif($ColumnType0=="double")Double#else${ColumnType}#end instance.");
    			return null;
    		}
#set($j=$j+1)#end #set($i=$i+1)#end

		
		    return ${table};
        } catch (HibernateException e) {
			setErrorInfo("queryByPK(Object obj): "+e);
			throw e;
		}
	}

  /** 
	 * 按唯一索引查询数据.
	 *
	 * @see com.lj.db.entity.dao.IDao#queryByUniqueIndex(java.util.Map)
	 */
	public Object queryByUniqueIndex(Map map) throws HibernateException {
		try{
    		StringBuffer allUniqueKey = new StringBuffer();
    		for(Iterator iter=map.keySet().iterator();iter.hasNext();){
    			allUniqueKey.append(iter.next()).append(',');
    		}
    
    		final int INX_SIZE = $TableINXS.size();
    		StringBuffer[] reg = new StringBuffer[INX_SIZE];
    		for(int i=0;i<INX_SIZE;i++){
    			reg[i] = new StringBuffer();
    		}
    		
    		{// judge start		
#set($i =0)#set($allUniqueKeyTip = "")#foreach($allUniqueKey0 in $TableINXS)#set($alluniquekey = $allUniqueKey0.toLowerCase())#set($allUniqueKeyTip=$allUniqueKeyTip.concat("\"").concat($allUniqueKey0).concat("\""))#set($i =$i+1)#if($i+1<$TableINXS.size())#set($allUniqueKeyTip = $allUniqueKeyTip.concat(" or ")) #end #end
#set($i =0)#foreach($allUniqueKey0 in $TableINXS)
    			{
    				String uqUnit = "(${allUniqueKey0})";
    				String[] keys = "${allUniqueKey0}".split(",");
    				for(int i=0;i<keys.length;i++){
    					reg[${i}].append(uqUnit.replace(",","|")).append(",");
    				}
    			}
#set($i =$i+1)#end
    			boolean isExists = false;
    			for(int i=0;i<INX_SIZE;i++){
    				isExists = isExists || Pattern.matches(reg[i].toString(),allUniqueKey.toString());
    			}
    			if (!isExists){
    				setErrorInfo("the param is error, it must include ${allUniqueKeyTip}.");
    				return null;
    			}
    		}//judge end
			
    		${Table} ${table} = null;
    		Query query = null;
    		Object objKey = null;
    		Object objValue = null;
				
#set($inx =0)#foreach($allUniqueKey0 in $TableINXS)
    		if (Pattern.matches(reg[${inx}].toString(),allUniqueKey.toString())){
    			query = getSession().createQuery("from com.lj.db.entity.pojo.${Table} where #set($i =0)#foreach($indexColumn0 in $ColumnCodes)#set($indexcolumn = $indexColumn0.toLowerCase())#if($allUniqueKey0.indexOf($indexColumn0)>=0)$indexcolumn = :$indexColumn0#if($i+1<$ColumnCodes.size()) and #end#end#set($i = $i +1)#end 1=1");
#set($i =0)#foreach($indexColumn0 in $ColumnCodes)#set($indexcolumn = $indexColumn0.toLowerCase())#set($ColumnType0 = $ColumnTypes.get($i))#set($COLUMNTYPE = $ColumnType0.toUpperCase())#set($columntype = $ColumnType0.toLowerCase())#set($ColumnType = $strings.capitalizeFirstLetter($ColumnType0))#if($allUniqueKey0.indexOf($indexColumn0)>=0)
    			objKey = "${indexColumn0}";
    			if (map.containsKey(objKey)){
    				objValue = map.get(objKey);
    				if (objValue instanceof #if($ColumnType0=="int")Integer#elseif($ColumnType0=="long")Long#elseif($ColumnType0=="float")Float#elseif($ColumnType0=="double")Double#else${ColumnType}#end) {
    					query.setParameter("${indexColumn0}", objValue, Hibernate.#if($ColumnType0=="int")INTEGER#else${COLUMNTYPE}#end);
    				}else{
    					setErrorInfo("the ${indexColumn0}'s value is error, it must be a #if($ColumnType0=="int")Integer#elseif($ColumnType0=="long")Long#elseif($ColumnType0=="float")Float#elseif($ColumnType0=="double")Double#else${ColumnType}#end instance.");
    					return null;
    				}
    			}else{
    				setErrorInfo("the param is error, it must include \"${indexColumn0}\".");
    				return null;
    			}
#end #set($i = $i +1)#end
		    }
		
#set($inx =$inx+1)#end

    		if (null == query) return null;
    		List list = query.list();
    		if (!list.isEmpty()){
    			${table} = (${Table})list.get(0);
    		}	
		
		    return ${table};
    	} catch (HibernateException e) {
			setErrorInfo("queryByUniqueIndex(Map map): "+e);
			throw e;
		}
	}

  /** 
	 * 查询所有数据.
	 *
	 * @see com.lj.db.entity.dao.IDao#queryAll()
	 */
	public List queryAll() throws HibernateException {
		try{
    		Query query = getSession().createQuery("from com.lj.db.entity.pojo.${Table}");
    		List list = query.list();

		    return list;
    	} catch (HibernateException e) {
			setErrorInfo("queryAll(): "+e);
			throw e;
		}
	}


  /** 
	 * 查询符合条件数据的指定记录集合.
	 *
	 * @see com.lj.db.entity.dao.IDao#query(java.util.Map, int, int)
	 */
	public List query(LinkedHashMap map, int first, int count) throws HibernateException {
		try{
    		StringBuffer queryHql = new StringBuffer("from com.lj.db.entity.pojo.${Table} where 1=1 ");
    		
    		for(Iterator iter=map.keySet().iterator();iter.hasNext();){
    			String key=(String)iter.next();
    			queryHql.append(" and ").append(key.toLowerCase());
    			queryHql.append(" = :").append(key);
    		}
    
    		Query query = getSession().createQuery(queryHql.toString());
    		query = query.setFirstResult(first<0?0:first).setMaxResults(count<0?0:count);
    		
    		for(Iterator iter=map.entrySet().iterator();iter.hasNext();){
    			Map.Entry entry=(Map.Entry)iter.next();
    			query = query.setParameter((String)entry.getKey(),entry.getValue());
    		}
    		
    		List list = query.list();
    		
		    return list;
    	} catch (HibernateException e) {
			setErrorInfo("query(LinkedHashMap map, int first, int count): "+e);
			throw e;
		}
	}
	
  /** 
	 * 查询符合条件数据.
	 *
	 * @see com.lj.db.entity.dao.IDao#query(java.util.Map, int, int)
	 */
	public List query(LinkedHashMap map) throws HibernateException {
	  return query(map, 0, Integer.MAX_VALUE );
	}

  /** 
	 * 查询符合条件数据的指定记录集合.
	 *
	 * @see com.lj.db.entity.dao.IDao#query(String, int, int)
	 */
	public List query(String where, int first, int count) throws HibernateException {
		try{
    		StringBuffer queryHql = new StringBuffer("from com.lj.db.entity.pojo.${Table} where 1=1 ");
    		queryHql.append(" and ").append(where);
    
    		Query query = getSession().createQuery(queryHql.toString());
    		query = query.setFirstResult(first<0?0:first).setMaxResults(count<0?0:count);
    		
    		List list = query.list();
    		
		    return list;
    	} catch (HibernateException e) {
			setErrorInfo("query(String where, int first, int count): "+e);
			throw e;
		}
	}
	
  /** 
	 * 查询符合条件数据.
	 *
	 * @see com.lj.db.entity.dao.IDao#query(String, int, int)
	 */
	public List query(String where) throws HibernateException {
	  return query(where, 0, Integer.MAX_VALUE );
	}

  /** 
	 * 查询数据个数.
	 *
	 * @see com.lj.db.entity.dao.IDao#queryCount()
	 */
	public int queryCount() throws HibernateException {
		try{
    		Query query = getSession().createQuery("select count(*) from com.lj.db.entity.pojo.${Table}");
    		Object obj = query.uniqueResult();
    		if (null==obj){
    			return 0;
    		}else{
    			return ((Integer)obj).intValue();
    		}
    	} catch (HibernateException e) {
			setErrorInfo("queryCount(): "+e);
			throw e;
		}
	}

  /** 
	 * 查询符合条件数据的个数.
	 *
	 * @see com.lj.db.entity.dao.IDao#queryCount(java.util.LinkedHashMap)
	 */
	public int queryCount(LinkedHashMap map) throws HibernateException {
		try{
    		StringBuffer queryHql = new StringBuffer("select count(*) from com.lj.db.entity.pojo.${Table} where 1=1 ");
    		
    		for(Iterator iter=map.keySet().iterator();iter.hasNext();){
    			String key=(String)iter.next();
    			queryHql.append(" and ").append(key.toLowerCase());
    			queryHql.append(" = :").append(key);
    		}
    
    		Query query = getSession().createQuery(queryHql.toString());
    		
    		for(Iterator iter=map.entrySet().iterator();iter.hasNext();){
    			Map.Entry entry=(Map.Entry)iter.next();
    			query = query.setParameter((String)entry.getKey(),entry.getValue());
    		}
    		
    		Object obj = query.uniqueResult();
    		if (null==obj){
    			return 0;
    		}else{
    			return ((Integer)obj).intValue();
    		}
    	} catch (HibernateException e) {
			setErrorInfo("queryCount(LinkedHashMap map): "+e);
			throw e;
		}
	}
	
	public static void main(String[] args) {
	}
}
